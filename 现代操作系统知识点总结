# 现代操作系统

- **1. 什么是操作系统？**
操作系统是用于管理计算机资源，合理组织安排计算机工作流程，方便用户使用的计算机程序的集合
- **2. 操作系统分类？**
批处理操作系统：计算机成批的，自动的，依次处理用户的作业，用户提交后只能等待这批作业全部处理完之后才能得到输出结果
分时系统：操作系统将时间分为若干时间片，依次轮流的为每个作业处理
实时系统
个人计算机操作系统
网络操作系统
分布式操作系统
嵌入式操作系统
...
- **3. 用户态与内核态？**
用户态：执行用户程序
内核态：运行操作系统程序，与硬件相关的操作都必须陷入内核态执行
特权指令：只能操作系统使用，用户程序不能使用的指令
非特权指令：用户程序可以使用的指令
用户态 -> 内核态：中断 / 异常 / 陷入
内核心 -> 用户态：设置程序状态字PSW
- **4. 中断与异常？**
相同点：
CPU对系统发生的某件事件做出的一种反应，CPU暂停正在执行的程序，保留现场，转而自动执行相应事件的处理程序，处理完毕后，回到断点处恢复现场，继续处理之前被打断的程序
不同点：
中断是被外部时间所引发的，引入中断是为了支持CPU与设备之间的并行操作
异常是由正在执行的指令所引发的，引入异常是为了处理CPU执行指令时本身可能会出现的问题，如除零
- **5. 系统调用？**
系统调用是用户在编程时可以调用的操作系统功能
是操作系统提供给编程人员的唯一接口
使CPU从用户态陷入内核态
系统调用主要包括进程控制，进程通信，文件使用，目录控制，设备管理等等
- **6. 并发与并行？**
并发：一段时间内，多个进程同时运行，如多道程序设计，允许多个进程同时存在内存，允许多个进程处于已经开始执行但是尚未执行完毕的状态
并行：某一时刻，有多个进程在同时运行，实现并行只能是多个处理器，因为一个CPU某时刻只能一个进程正在运行
- **7. 进程？**
定义：进程是具有独立功能的程序，关于某个特定数据集的一次运行活动，是系统进行资源分配和调度的基本单位。
**进程的三状态模型：**
就绪态（ready）：进程准备好了，随时可以被系统调度进CPU执行
运行态（running）：进程正在CPU中执行时的状态
阻塞态（waiting）：进程被中断，比如等待IO时间输入，处于阻塞状态，除非某种事件发生，否则进程不能运行
进程的其他状态：
创建（new）：已完成创建，但是因为资源有限，系统尚未打算执行该进程
终止（terminated）：进程执行完毕后，进入该状态，完成一些数据统计与资源回收
挂起（suspend）：用于调节负载，进程被放入磁盘，不占用内存空间
**进程控制操作完成进程各状态之间的转换，由具有特定功能的原语完成**
主要有进程创建原语，进程撤销原语，阻塞原语，唤醒原语，挂起原语，激活原语，改变进程优先级等等
**进程的创建**：unix（fork/exec），windows（CreateProcess）
给新进程分配唯一标识PID与进程控制块PCB
为进程分配地址空间
初始化进程控制块
设置相应的队列指针（把新进程加入到进程就绪队列链表中）
**进程的撤销**：unix（exit），windows（TerminateProcess）
收回进程所占用的资源（收回分配的内存，关闭打开的文件等）
撤销该进程的PCB
**进程阻塞**
处于运行状态的进程，由于期待某事件的发生（如IO输入，等待其他进程发送的消息等），当此事件尚未发生时，由进程自己执行阻塞原语，使自己由运行态变为阻塞态
**UNIX中几个基本的进程控制操作**
fork()：通过复制调用进程来建立新的进程，是最基本的进程建立操作，对父进程返回子进程的pid，对子进程返回0
exec()：包括一系列的系统调用，通过用一段新的程序代码，覆盖原来的空间，实现进程执行代码的转换
wait()：提供初级进程同步操作，使一个进程等待另外一个进程的结束
exit()：终止一个进程的运行
- **8. 进程控制块PCB？**
PCB：Process Control Block，进程控制块，又称为进程描述符
操作系统用于管理进程的一个专门的数据结构
记录进程的各种属性，描述进程的动态变化过程
PCB是系统感知进程存在的唯一标志，PCB与进程为一一对应的
进程表：是所有进程的PCB集合
PCB里面应该包括进程的那些信息呢？
进程描述信息（进程标识符PID，进程名，用户标识符，进程组关系）
进程控制信息（当前状态，优先级，代码执行入口，程序磁盘地址等等）
所拥有的资源和使用情况（虚拟地址空间，打开文件列表）
CPU现场（寄存器值，指向该进程页表的指针）
- **9. 原语，原子操作？**
原语：系统提供的完成某种特定功能的一段程序，由机器指令编写，执行过程不可中断
原子操作：在多线程操作系统中不能被其他线程打断的操作叫做原子操作。当该次操作无法完成时，必须回到操作之前的状态，原子操作不可分割。
- **10. 进程与程序的区别？**
进程是程序在特定数据集上的一次执行过程，是动态的；程序是存储在某个空间的静态文件
进程是有生命周期的；而程序是相对持久的
进程能更准确的刻画并发；程序不能
一个程序可对应多个进程
进程具有创建其他进程的功能
- **11. 线程？**
**为什么有了进程还需要引入线程？**
应用程序的需要：某些应用程序需要同时发生多种活动，比如字符处理软件，当输入文字时，排版也在同时进行，自动保存也在进行。如果用线程来描述这样的活动的话，编程模型就会变得更简单，因为同一进程的所有线程都处于同一地址空间，拥有相同的资源
开销上考虑：线程更加轻量级，相对进程而言，线程的相关信息较少，它更容易创建，也更容易撤销。当有大量线程需要创建和修改时，这会节省大量的开销；线程之间的切换比进程之间的切换要快的多，因为切换线程不需要考虑地址空间，只需要保存维护程序计数器，寄存器，堆栈等少量信息；线程之间的通信也比进程之间的通信要简单，无需调用内核，直接通过共享变量即可
**线程的概念**
线程是进程中的一个运行实体，是CPU的调度单位
进程有两个属性，一个是资源的拥有者，另一个是CPU的调度单位
引入线程之后，进程还是资源的拥有者，而线程继承了CPU的调度单位这一属性，而同一进程的所有线程共享进程的所有资源
**线程的属性**
线程标识符ID
有状态及状态转换，即线程切换
切换线程时需要保存上下文：包括程序计数器，寄存器，堆栈等
线程有自己的堆栈
同一进程的所有线程共享进程的地址空间和其他资源
一个线程可以创建也撤销另一个线程
**线程机制的实现**
**用户级线程**
在用户空间建立线程库，提供一组管理线程的过程
由运行时系统来完成线程的管理工作
内核管理的还是进程，内核不知道线程的存在
线程切换不需要陷入内核
典型如Linux，Unix
优点：
切换速度快
调度算法可以由应用程序设定
用户级线程可以运行在任何操作系统，包括不支持线程操作系统
缺点：
同一进程的所有线程只能运行在一个处理器上
若一个进程的某个线程调用了阻塞的系统调用，那么该进程的所有线程也将会被阻塞，页面失效也会有同样的问题
**内核级线程**
内核管理所有的线程管理，创建，撤销与调度，并向应用程序提供API
内核维护进程和线程上下文
线程的切换需要内核支持
以线程为基础进行调度
优点：
由内核调度，当有多个处理器时，一个进程的多个线程可以在多个处理器上同时执行
一个进程的某个线程阻塞不会引起其他线程的阻塞，页面失效同理
缺点：
由内核进行创建，撤销，调度，系统开销更大
典型如Windows
**混合实现**
线程创建在用户空间
线程调度在内核

- **12. 进程与线程的区别与联系**
**定义的角度**
进程是具有特定功能的程序关于某个数据集的一次运行活动
线程是进程的一个一个运行实体
**角色的角度**
进程是CPU资源分配的基本单位，线程是CPU调度的基本单位
**资源共享的角度**
进程之间一般不能共享资源，两个进程间通信需要进行系统调用；
而同一进程的所有线程共享该进程的地址空间和其他资源，线程之间的通信可直接通过共享内存来进行
**独立性角度**
进程与进程之间一般是独立的，每个进程都有自己独立的地址空间
而线程没有自己的地址空间，它是依赖于进程而存在的
****
****
****
****
****
****
****
****
****
****
****
****
****